By default, the program uses the character you defined first to format your text. In our case, the character named "serif" is the one currently being used.

To access the bold font that we defined, encase the text with the *star* symbol. To access the italic font, encase the text with _underscores_. And, if you couldn't already guess, to use the bold-italic font, use both the _*star and underscore*_.

You can *mix _and* match* stars_ and underscores* however you would like. That includes m*akin*g the m_iddl_e of a word bold or italic too.

To access the formatting of a different character, [sans] encase the name of that character in square braces. So to go back to our old formatting, [serif] we just need to put that character's name in square braces.

Sw[sans]ap[serif]pi[sans]ng [serif] characters mid word also works!

Stars, underscores, and square braces are all special symbols. If you want to use them "as is" in your caption, you need to put a backslash symbol before them, \*like so\_.

\[ . . . \]

If you include  extra   spaces    in  between words, they are replaced by one space. This is because spaces are also treated like special symbols (it made the implementation of line wrapping easier...). So if you want multiple spaces to be rendered, you\ \ \ need to put backslashes before them as well.

When creating split captions, the "split" always happens at a pair of newlines (where a "newline" is the symbol that's inputted when you press the enter key)

Where text that's
broken up like this
won't get split
between the text wings.

But text broken up with two presses of the enter key can.

When you have two "characters" with different font heights, the behavior of newlines can become a bit confusing. For instance:

When a character with larger font
[sans] is followed by one with a smaller font
[serif] and then followed by another with a larger font,

The gap between the first two lines seems a little large. This is because the amount of space that your hypothetical "cursor" moves is determined by the height of the current character's font. So if you want that cursor to move the right amount:

You need to switch characters [sans]
before hitting "enter". [serif]

Emojis and symbols are supported if and only if the font you're using supports them. For instance, if I try to use the heart symbol with the current font (â™¥), it's rendered as a blank box since the font doesn't support it. But if I switch to one that does support it ([em]â™¥[serif]), then we get the behavior we want.

The same logic applies to emoji ([em]ðŸ¥’[serif]). Your text editor may display them as a strange box with letters and numbers, but as long the font you setup in the specification file supports them, they should render as expected.

If you intend to use symbols in your caption, I recommend creating a dedicated character for them with the font "NotoEmoji" (as I've done in this example).

That covers about everything! If you find any problem with any part of this project, please leave an "Issue" on the GitHub page or message me on Discord at "substantialpickle". This is an alternate account of mine, so please be patient if I don't reply immediately!
